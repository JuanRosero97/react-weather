[{"E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\index.js":"1","E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\App.js":"2","E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\reportWebVitals.js":"3","E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\components\\home\\index.jsx":"4","E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\services\\apiweather.service.js":"5"},{"size":449,"mtime":1642382944000,"results":"6","hashOfConfig":"7"},{"size":254,"mtime":1642383112000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":8201,"mtime":1668566234000,"results":"10","hashOfConfig":"7"},{"size":899,"mtime":1668556320000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"17n9b56",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\index.js",[],["24","25"],"E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\App.js",[],"E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\reportWebVitals.js",[],"E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\components\\home\\index.jsx",["26","27","28"],"import \"./home.css\"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { IconContext } from \"react-icons\";\r\n\r\nimport { MdMyLocation, MdLocationPin,MdSearch} from \"react-icons/md\";\r\nimport { getInfoWeather,getInfoWeatherDays } from '../../services/apiweather.service';\r\nimport  moment  from \"moment\";\r\n\r\nconst date_weather = \"Today - Wed, 19 Jan\"\r\n\r\nconst Home = ()=>{\r\n    \r\n    const [city, setCity] = useState('BogotÃ¡');\r\n    const [prevcity, setPrevCity] = useState('BogotÃ¡');\r\n    const [units, setUnits] = useState('metric');\r\n    const [weather, setWeather] = useState({});\r\n    const [weatherDays, setWeatherDays] = useState([]);\r\n    const [unitsObj, setUnitsObj] = useState([{\r\n        name:\"Â°C\",\r\n        value:\"metric\",\r\n        class:\"unit-item\",\r\n        active:true\r\n    },{\r\n        name:\"Â°F\",\r\n        value:\"imperial\",\r\n        class:\"unit-item\",\r\n        active:false\r\n    }]);\r\n\r\n    useEffect(() => {\r\n        async function fetchLoad() {\r\n            try{\r\n                const infoWeather =  await getInfoWeather(city,units);\r\n                setWeather(infoWeather.data)\r\n            }catch(e){\r\n                console.log(\"ðŸš€ ~ file: index.jsx ~ line 30 ~ fetchLoad ~ e\", e)                \r\n            }\r\n        }\r\n        fetchLoad ();\r\n    },[setWeather,units,city])\r\n\r\n    useEffect(() => {\r\n        async function fetchLoadDays() {\r\n            try{\r\n                const infoWeatherDays =  (await getInfoWeatherDays(city,units)).data;\r\n                let obj = []\r\n\r\n                for (let i = 0; i < infoWeatherDays.list.length; i++){\r\n                    if(i === 0 || i%8 === 0){ obj.push(infoWeatherDays.list[i])}\r\n                }\r\n                setWeatherDays(obj)\r\n            }catch(e){\r\n                console.log(\"ðŸš€ ~ file: index.jsx ~ line 30 ~ fetchLoad ~ e\", e)                \r\n            }\r\n        }\r\n        fetchLoadDays ();\r\n    },[setWeatherDays,units,city])\r\n    \r\n    const changeUnit = (option,index) => {       \r\n        for (let e = 0; e < unitsObj.length; e++) {\r\n            unitsObj[e].active = false;\r\n        }\r\n        unitsObj[index].active = true;\r\n        setUnitsObj(unitsObj);\r\n        setUnits(option);\r\n    }\r\n\r\n\r\n    const handleChangeCity = (e)=>{\r\n        e.preventDefault();\r\n        const { value } = e.target\r\n        setPrevCity(value)\r\n    }\r\n\r\n    const changeCity = ()=>{\r\n        if(prevcity){\r\n            setCity(prevcity)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-3 col-s-3 local-place\">\r\n                    <div className=\"row location\">\r\n                        <div className=\"col-8 col-s-8\">\r\n                        <input\r\n                            className='btn btn-search'\r\n                            type=\"text\"\r\n                            id=\"city\"\r\n                            name=\"city\"\r\n                            defaultValue={city} onChange={(e) => handleChangeCity(e)}\r\n                        />\r\n                        </div>\r\n                        <div className=\"col-4 col-s-4 align-content-center\">\r\n                            <button className='btn btn-locate' onClick={() => changeCity()}>\r\n                                <IconContext.Provider value={{ className: \"locate-svg-class-name\" }}>\r\n                                    <div> <MdSearch /></div>                                  \r\n                                </IconContext.Provider>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className= \"row container-icon-weather\">\r\n                        <div className= \"col-12 col-s-12 icon-background-main\"> </div>\r\n                        <div className= \"col-12 col-s-12 weather-icon\"> \r\n                            <img src={weather?.weather?  `https://openweathermap.org/img/wn/${weather.weather[0].icon}@4x.png`: \"\"} alt=\"weather-icon\"/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className= \"row container-info-weather\">\r\n                        <div className= \"col-12 col-s-12 temp-text\"> \r\n                            {weather.main? Math.round(weather.main.temp):\"\"}<span>{units === \"metric\" ? \"Â°C\" : \"Â°F\"}</span>\r\n                        </div>\r\n                        <div className= \"col-12 col-s-12 time-weather-text\"> {weather?.weather? weather.weather[0].main : \"\"}</div>\r\n                        <div className= \"col-12 col-s-12 date-city-weather-text\"> Today - {moment().format(\"ddd, DD MMM\")} </div>\r\n                        <div className= \"col-12 col-s-12 date-city-weather-text\"> <MdLocationPin /> {city}, {weather.sys?.country} </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"col-9 col-s-9 bloque2\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-s-12 units-block\">\r\n                            {unitsObj.map((unit, i) => (\r\n                                <a key={(i)} onClick={() => changeUnit(unit.value,i)} className={unit.active? `${unit.class} active`: unit.class}>{unit.name}</a>                               \r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-s-12 data-days-content\">\r\n                            {   weatherDays?.map((day,i)=>(\r\n                                    <div key={(i)} className=\"content-card\">\r\n                                        <div>\r\n                                            <span>{i===0? 'Tomorrow':moment(day.dt_txt).format('ddd, DD MMM')}</span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <img src={day?.weather? `https://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`: \"\"} alt=\"weather-icon\"/>\r\n                                        </div>\r\n                                        <div className=\"temp-content\">\r\n                                            <span className=\"temp-min\">{day.main? Math.round(day.main.temp_min):\"\"}<span>{units === \"metric\" ? \"Â°C\" : \"Â°F\"}</span></span>\r\n                                            <span>{day.main? Math.round(day.main.temp_max):\"\"}<span>{units === \"metric\" ? \"Â°C\" : \"Â°F\"}</span></span>\r\n                                        </div>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-s-12 title-highlight\">Todayâ€™s Hightlights</div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-s-12 data-days-content\">\r\n                            <div className=\"params-card\">\r\n                                <div><span className=\"title-pressure\">Humidity</span></div>\r\n                                <div><span className=\"pressure\">{weather.main?.humidity}<span> %</span> </span></div>\r\n                                <progress className=\"mt-10\" id=\"humidity\" max=\"100\" value={weather.main?.humidity}>{weather.main?.humidity}</progress>\r\n                            </div>\r\n\r\n                            <div className=\"params-card\">\r\n                                <div><span className=\"title-pressure\">Air Pressure</span></div>\r\n                                <div className=\"mt-10\"><span className=\"pressure\">{weather.main?.pressure}<span> hPa</span> </span></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row center-elm\">\r\n                        <div className=\"creator\">\r\n                            <a href=\"https://juanrosero.netlify.app/\" target=\"blank\">Created by <span className=\"sign\">Juan Rosero</span></a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Home","E:\\Desarrollos personales\\react_weather\\react_weather_front\\src\\services\\apiweather.service.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":5,"column":10,"nodeType":"35","messageId":"36","endLine":5,"endColumn":22},{"ruleId":"33","severity":1,"message":"37","line":9,"column":7,"nodeType":"35","messageId":"36","endLine":9,"endColumn":19},{"ruleId":"38","severity":1,"message":"39","line":124,"column":33,"nodeType":"40","endLine":124,"endColumn":147},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'MdMyLocation' is defined but never used.","Identifier","unusedVar","'date_weather' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]